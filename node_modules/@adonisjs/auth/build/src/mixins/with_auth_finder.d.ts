import type { Hash } from '@adonisjs/core/hash';
import type { NormalizeConstructor } from '@adonisjs/core/types/helpers';
/**
 * Mixing to add user lookup and password verification methods
 * on a model.
 *
 * Under the hood, this mixin defines following methods and hooks
 *
 * - beforeSave hook to hash user password
 * - findForAuth method to find a user during authentication
 * - verifyCredentials method to verify user credentials and prevent
 *   timing attacks.
 */
export declare function withAuthFinder(hash: () => Hash, options: {
    uids: string[];
    passwordColumnName: string;
}): <Model extends NormalizeConstructor<import("@adonisjs/lucid/types/model").LucidModel>>(superclass: Model) => {
    new (...args: any[]): {
        $attributes: import("@adonisjs/lucid/types/model").ModelObject;
        $extras: import("@adonisjs/lucid/types/model").ModelObject;
        $original: import("@adonisjs/lucid/types/model").ModelObject;
        $preloaded: {
            [relation: string]: import("@adonisjs/lucid/types/model").LucidRow | import("@adonisjs/lucid/types/model").LucidRow[];
        };
        $columns: undefined;
        $sideloaded: import("@adonisjs/lucid/types/model").ModelObject;
        $primaryKeyValue?: string | number | undefined;
        $isPersisted: boolean;
        $isNew: boolean;
        $isLocal: boolean;
        $dirty: import("@adonisjs/lucid/types/model").ModelObject;
        $isDirty: boolean;
        $isDeleted: boolean;
        $options?: import("@adonisjs/lucid/types/model").ModelOptions | undefined;
        $trx?: import("@adonisjs/lucid/types/database").TransactionClientContract | undefined;
        $setOptionsAndTrx(options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined): void;
        useTransaction(trx: import("@adonisjs/lucid/types/database").TransactionClientContract): any;
        useConnection(connection: string): any;
        $getQueryFor(action: "insert", client: import("@adonisjs/lucid/types/database").QueryClientContract): import("@adonisjs/lucid/types/querybuilder").InsertQueryBuilderContract<unknown[]>;
        $getQueryFor(action: "delete" | "refresh" | "update", client: import("@adonisjs/lucid/types/database").QueryClientContract): import("@adonisjs/lucid/types/model").ModelQueryBuilderContract<import("@adonisjs/lucid/types/model").LucidModel, import("@adonisjs/lucid/types/model").LucidRow>;
        $setAttribute(key: string, value: any): void;
        $getAttribute(key: string): any;
        $getAttributeFromCache(key: string, callback: (value: any) => any): any;
        $hasRelated(key: string): boolean;
        $setRelated(key: string, result: import("@adonisjs/lucid/types/querybuilder").OneOrMany<import("@adonisjs/lucid/types/model").LucidRow> | null): void;
        $pushRelated(key: string, result: import("@adonisjs/lucid/types/querybuilder").OneOrMany<import("@adonisjs/lucid/types/model").LucidRow> | null): void;
        $getRelated(key: string, defaultValue?: any): import("@adonisjs/lucid/types/querybuilder").OneOrMany<import("@adonisjs/lucid/types/model").LucidRow> | null | undefined;
        $consumeAdapterResult(adapterResult: import("@adonisjs/lucid/types/model").ModelObject, sideloadAttributes?: import("@adonisjs/lucid/types/model").ModelObject | undefined): void;
        $hydrateOriginals(): void;
        fill(value: Partial<{}>, allowExtraProperties?: boolean | undefined): any;
        merge(value: Partial<{}>, allowExtraProperties?: boolean | undefined): any;
        enableForceUpdate(): any;
        save(): Promise<any>;
        delete(): Promise<void>;
        refresh(): Promise<any>;
        load: import("@adonisjs/lucid/types/model").LucidRowPreload<any>;
        preload: import("@adonisjs/lucid/types/model").LucidRowPreload<any>;
        loadAggregate: <Self extends any, Name extends import("@adonisjs/lucid/types/relations").ExtractModelRelations<Self>, RelatedBuilder = Self[Name] extends import("@adonisjs/lucid/types/relations").ModelRelations<import("@adonisjs/lucid/types/model").LucidModel, import("@adonisjs/lucid/types/model").LucidModel> ? Self[Name]["subQuery"] : never>(name: Name, callback: (builder: RelatedBuilder) => void) => import("@adonisjs/lucid/types/model").LazyLoadAggregatesContract<Self>;
        loadCount: <Self_1 extends any, Name_1 extends import("@adonisjs/lucid/types/relations").ExtractModelRelations<Self_1>, RelatedBuilder_1 = Self_1[Name_1] extends import("@adonisjs/lucid/types/relations").ModelRelations<import("@adonisjs/lucid/types/model").LucidModel, import("@adonisjs/lucid/types/model").LucidModel> ? Self_1[Name_1]["subQuery"] : never>(name: Name_1, callback?: ((builder: RelatedBuilder_1) => void) | undefined) => import("@adonisjs/lucid/types/model").LazyLoadAggregatesContract<Self_1>;
        serializeAttributes(fields?: import("@adonisjs/lucid/types/model").CherryPickFields | undefined, raw?: boolean | undefined): import("@adonisjs/lucid/types/model").ModelObject;
        serializeComputed(fields?: import("@adonisjs/lucid/types/model").CherryPickFields | undefined): import("@adonisjs/lucid/types/model").ModelObject;
        serializeRelations(fields: undefined, raw: true): {
            [key: string]: import("@adonisjs/lucid/types/model").LucidRow | import("@adonisjs/lucid/types/model").LucidRow[];
        };
        serializeRelations(cherryPick: {
            [relation: string]: import("@adonisjs/lucid/types/model").CherryPick;
        } | undefined, raw: false | undefined): import("@adonisjs/lucid/types/model").ModelObject;
        serializeRelations(cherryPick?: {
            [relation: string]: import("@adonisjs/lucid/types/model").CherryPick;
        } | undefined, raw?: boolean | undefined): import("@adonisjs/lucid/types/model").ModelObject;
        serialize(cherryPick?: import("@adonisjs/lucid/types/model").CherryPick | undefined): import("@adonisjs/lucid/types/model").ModelObject;
        toObject(): import("@adonisjs/lucid/types/model").ModelObject;
        toJSON(): import("@adonisjs/lucid/types/model").ModelObject;
        related<Name_2 extends undefined>(relation: Name_2): any[Name_2] extends import("@adonisjs/lucid/types/relations").ModelRelations<import("@adonisjs/lucid/types/model").LucidModel, import("@adonisjs/lucid/types/model").LucidModel> ? any[Name_2]["client"] : never;
    };
    /**
     * Hook to verify user password when creating or updating
     * the user model.
     */
    hashPassword<T extends any & Model>(this: T, user: InstanceType<T>): Promise<void>;
    /**
     * Finds the user for authentication via "verifyCredentials".
     * Feel free to override this method customize the user
     * lookup behavior.
     */
    findForAuth<T_1 extends any & Model>(this: T_1, uids: string[], value: string): Promise<InstanceType<T_1> | null>;
    /**
     * Find a user by uid and verify their password. This method is
     * safe from timing attacks.
     */
    verifyCredentials<T_2 extends any & Model>(this: T_2, uid: string, password: string): Promise<InstanceType<T_2>>;
    readonly booted: boolean;
    find: <T_3 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_3, value: any, options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => Promise<InstanceType<T_3> | null>;
    $columnsDefinitions: Map<string, import("@adonisjs/lucid/types/model").ModelColumnOptions>;
    $relationsDefinitions: Map<string, import("@adonisjs/lucid/types/relations").RelationshipsContract>;
    $computedDefinitions: Map<string, import("@adonisjs/lucid/types/model").ComputedOptions>;
    primaryKey: string;
    connection?: string | undefined;
    namingStrategy: import("@adonisjs/lucid/types/model").NamingStrategyContract;
    table: string;
    selfAssignPrimaryKey: boolean;
    $adapter: import("@adonisjs/lucid/types/model").AdapterContract;
    useAdapter: (adapter: import("@adonisjs/lucid/types/model").AdapterContract) => void;
    $hooks: import("@poppinss/hooks").default<any>;
    $keys: {
        attributesToColumns: import("@adonisjs/lucid/types/model").ModelKeysContract;
        attributesToSerialized: import("@adonisjs/lucid/types/model").ModelKeysContract;
        columnsToAttributes: import("@adonisjs/lucid/types/model").ModelKeysContract;
        columnsToSerialized: import("@adonisjs/lucid/types/model").ModelKeysContract;
        serializedToColumns: import("@adonisjs/lucid/types/model").ModelKeysContract;
        serializedToAttributes: import("@adonisjs/lucid/types/model").ModelKeysContract;
    };
    $createFromAdapterResult: <T_4 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_4, result?: import("@adonisjs/lucid/types/model").ModelObject | undefined, sideloadAttributes?: import("@adonisjs/lucid/types/model").ModelObject | undefined, options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => InstanceType<T_4> | null;
    $createMultipleFromAdapterResult: <T_5 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_5, results: import("@adonisjs/lucid/types/model").ModelObject[], sideloadAttributes?: import("@adonisjs/lucid/types/model").ModelObject | undefined, options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => InstanceType<T_5>[];
    $addColumn: (name: string, options: Partial<import("@adonisjs/lucid/types/model").ColumnOptions>) => import("@adonisjs/lucid/types/model").ColumnOptions;
    $hasColumn: (name: string) => boolean;
    $getColumn: (name: string) => import("@adonisjs/lucid/types/model").ModelColumnOptions | undefined;
    $addComputed: (name: string, options: Partial<import("@adonisjs/lucid/types/model").ComputedOptions>) => import("@adonisjs/lucid/types/model").ComputedOptions;
    $hasComputed: (name: string) => boolean;
    $getComputed: (name: string) => import("@adonisjs/lucid/types/model").ComputedOptions | undefined;
    $addRelation: (name: string, type: "hasOne" | "hasMany" | "belongsTo" | "manyToMany" | "hasManyThrough", relatedModel: () => import("@adonisjs/lucid/types/model").LucidModel, options: import("@adonisjs/lucid/types/model").ModelRelationOptions) => void;
    $hasRelation: (name: string) => boolean;
    $getRelation: {
        <Model_1 extends import("@adonisjs/lucid/types/model").LucidModel, Name_3 extends import("@adonisjs/lucid/types/relations").ExtractModelRelations<InstanceType<Model_1>>>(this: Model_1, name: Name_3): InstanceType<Model_1>[Name_3] extends import("@adonisjs/lucid/types/relations").ModelRelations<import("@adonisjs/lucid/types/model").LucidModel, import("@adonisjs/lucid/types/model").LucidModel> ? InstanceType<Model_1>[Name_3]["client"]["relation"] : import("@adonisjs/lucid/types/relations").RelationshipsContract;
        <Model_2 extends import("@adonisjs/lucid/types/model").LucidModel>(this: Model_2, name: string): import("@adonisjs/lucid/types/relations").RelationshipsContract;
    };
    $defineProperty: <Model_3 extends import("@adonisjs/lucid/types/model").LucidModel, Prop extends keyof Model_3>(this: Model_3, propertyName: Prop, defaultValue: Model_3[Prop], strategy: "inherit" | "define" | ((value: Model_3[Prop]) => Model_3[Prop])) => void;
    boot: () => void;
    before: {
        <Model_4 extends import("@adonisjs/lucid/types/model").LucidModel, Event_1 extends "find" | "fetch">(this: Model_4, event: Event_1, handler: import("@adonisjs/lucid/types/model").HooksHandler<import("@adonisjs/lucid/types/model").ModelQueryBuilderContract<Model_4, InstanceType<Model_4>>, Event_1>): void;
        <Model_5 extends import("@adonisjs/lucid/types/model").LucidModel>(this: Model_5, event: "paginate", handler: import("@adonisjs/lucid/types/model").HooksHandler<[import("@adonisjs/lucid/types/model").ModelQueryBuilderContract<Model_5, InstanceType<Model_5>>, import("@adonisjs/lucid/types/model").ModelQueryBuilderContract<Model_5, InstanceType<Model_5>>], "paginate">): void;
        <Model_6 extends import("@adonisjs/lucid/types/model").LucidModel, Event_2 extends import("@adonisjs/lucid/types/model").EventsList>(this: Model_6, event: Event_2, handler: import("@adonisjs/lucid/types/model").HooksHandler<InstanceType<Model_6>, Event_2>): void;
    };
    after: {
        <Model_7 extends import("@adonisjs/lucid/types/model").LucidModel>(this: Model_7, event: "fetch", handler: import("@adonisjs/lucid/types/model").HooksHandler<InstanceType<Model_7>[], "fetch">): void;
        <Model_8 extends import("@adonisjs/lucid/types/model").LucidModel>(this: Model_8, event: "paginate", handler: import("@adonisjs/lucid/types/model").HooksHandler<import("@adonisjs/lucid/types/model").ModelPaginatorContract<InstanceType<Model_8>>, "paginate">): void;
        <Model_9 extends import("@adonisjs/lucid/types/model").LucidModel, Event_3 extends import("@adonisjs/lucid/types/model").EventsList>(this: Model_9, event: Event_3, handler: import("@adonisjs/lucid/types/model").HooksHandler<InstanceType<Model_9>, Event_3>): void;
    };
    create: <T_6 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_6, values: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_6>>>, options?: import("@adonisjs/lucid/types/model").ModelAssignOptions | undefined) => Promise<InstanceType<T_6>>;
    createMany: <T_7 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_7, values: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_7>>>[], options?: import("@adonisjs/lucid/types/model").ModelAssignOptions | undefined) => Promise<InstanceType<T_7>[]>;
    findOrFail: <T_8 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_8, value: any, options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => Promise<InstanceType<T_8>>;
    findBy: <T_9 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_9, key: string, value: any, options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => Promise<InstanceType<T_9> | null>;
    findByOrFail: <T_10 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_10, key: string, value: any, options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => Promise<InstanceType<T_10>>;
    first: <T_11 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_11, options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => Promise<InstanceType<T_11> | null>;
    firstOrFail: <T_12 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_12, options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => Promise<InstanceType<T_12>>;
    findMany: <T_13 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_13, value: any[], options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => Promise<InstanceType<T_13>[]>;
    firstOrNew: <T_14 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_14, searchPayload: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_14>>>, savePayload?: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_14>>> | undefined, options?: import("@adonisjs/lucid/types/model").ModelAssignOptions | undefined) => Promise<InstanceType<T_14>>;
    firstOrCreate: <T_15 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_15, searchPayload: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_15>>>, savePayload?: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_15>>> | undefined, options?: import("@adonisjs/lucid/types/model").ModelAssignOptions | undefined) => Promise<InstanceType<T_15>>;
    updateOrCreate: <T_16 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_16, searchPayload: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_16>>>, updatePayload: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_16>>>, options?: import("@adonisjs/lucid/types/model").ModelAssignOptions | undefined) => Promise<InstanceType<T_16>>;
    fetchOrNewUpMany: <T_17 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_17, predicate: keyof import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_17>> | (keyof import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_17>>)[], payload: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_17>>>[], options?: import("@adonisjs/lucid/types/model").ModelAssignOptions | undefined) => Promise<InstanceType<T_17>[]>;
    fetchOrCreateMany: <T_18 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_18, predicate: keyof import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_18>> | (keyof import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_18>>)[], payload: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_18>>>[], options?: import("@adonisjs/lucid/types/model").ModelAssignOptions | undefined) => Promise<InstanceType<T_18>[]>;
    updateOrCreateMany: <T_19 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_19, predicate: keyof import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_19>> | (keyof import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_19>>)[], payload: Partial<import("@adonisjs/lucid/types/model").ModelAttributes<InstanceType<T_19>>>[], options?: import("@adonisjs/lucid/types/model").ModelAssignOptions | undefined) => Promise<InstanceType<T_19>[]>;
    all: <T_20 extends import("@adonisjs/lucid/types/model").LucidModel>(this: T_20, options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => Promise<InstanceType<T_20>[]>;
    query: <Model_10 extends import("@adonisjs/lucid/types/model").LucidModel, Result = InstanceType<Model_10>>(this: Model_10, options?: import("@adonisjs/lucid/types/model").ModelAdapterOptions | undefined) => import("@adonisjs/lucid/types/model").ModelQueryBuilderContract<Model_10, Result>;
    truncate: (cascade?: boolean | undefined) => Promise<void>;
} & Model;
